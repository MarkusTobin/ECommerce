@using ECommerce.Frontend.Components.Pages
@using ECommerce.Frontend.Services
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthService AuthService

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (isAuthenticated)
            {
                <button class="btn btn-link" @onclick="Logout">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            }
            else
            {
                <button class="btn btn-link" @onclick="OnLoginClick">
                    <i class="fas fa-sign-in-alt"></i> Login
                </button>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AuthService.InitializeAsync();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User.Identity.IsAuthenticated;
            StateHasChanged();
        }
    }

    private void OnLoginClick()
    {
        Navigation.NavigateTo("/login");
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        isAuthenticated = false;
        Navigation.NavigateTo("/login");
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = task.Result;
        isAuthenticated = authState.User.Identity.IsAuthenticated;
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
