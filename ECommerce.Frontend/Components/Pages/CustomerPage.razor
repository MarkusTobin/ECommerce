@page "/customer"

@inject OrderService OrderService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject CustomerService CustomerService

@if (isCustomer)
{
    <EditCustomerComponent />
    <YourOrdersComponent />
}
else
{
    <h3>Customer Page</h3>
    <p>Only customers can access this page.</p>
}

@code {
    private string? userRole;
    private bool isInitialized;
    private bool isCustomer = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                userRole = user.Claims.FirstOrDefault(c => c.Type == "role")?.Value;
            }
            catch (JSDisconnectedException)
            {
            }
            isInitialized = true;
            StateHasChanged();
        }
    }

    private async Task<bool> CheckIfUserIsCustomer(string email)
    {
        var customer = await CustomerService.GetCustomerByEmailAsync(email);
        return customer != null;
    }
}