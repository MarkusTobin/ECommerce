@page "/orders/{orderId}"
@using ECommerce.Frontend.Services
@using ECommerce.Shared.Dtos
@using MudBlazor
@using MudBlazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject OrderService OrderService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<MudLayout>
    <MudMainContent>
        <MudContainer>
            @if (isLoading)
            {
                <MudText Typo="Typo.h6">Loading...</MudText>
            }
            else if (!isAuthorized)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                <div>
                    <h4>Order Details</h4>
                    <p>Order ID: @order.Id</p>
                    <p>Customer Name: @order.CustomerFullName</p>
                    <p>Customer Email: @order.CustomerEmail</p>
                    <p>Order Date: @order.OrderDate.ToString("g")</p>
                    <p>Total Price: @order.TotalPrice.ToString("C")</p>
                    <h5>Order Items</h5>
                    <ul>
                        @foreach (var item in order.OrderDetails)
                        {
                            <li>@item.ProductName - Quantity: @item.Quantity - Price: @item.UnitPrice.ToString("C")</li>
                        }
                    </ul>
                </div>
            }
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [Parameter]
    public string OrderId { get; set; }
    private OrderDto order;
    private bool isAuthorized = false;
    private bool isLoading = true;
    private string? userRole;
    private bool isInitialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                userRole = user.Claims.FirstOrDefault(c => c.Type == "role")?.Value;
                var email = user.Claims.FirstOrDefault(c => c.Type == "unique_name")?.Value;

                order = await OrderService.GetOrderByIdAsync(OrderId);

                if (order != null && (order.CustomerEmail == email || userRole == "Admin"))
                {
                    isAuthorized = true;
                }
            }
            catch (JSDisconnectedException)
            {
            }
            isLoading = false;
            isInitialized = true;
            StateHasChanged();
        }
    }
}

