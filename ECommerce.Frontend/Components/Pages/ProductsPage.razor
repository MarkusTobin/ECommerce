@page "/"
@using ECommerce.Frontend.Services
@using ECommerce.Shared.Dtos
@using Microsoft.AspNetCore.Components.Authorization
@using ECommerce.Frontend.Models
@using MudBlazor
@using MudBlazor.Services
@inject ProductService ProductService
@inject CartService CartService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Product List</PageTitle>
<MudAutocomplete T="string" Label="Search" Placeholder="Find products.." SearchFunc="SearchProducts">
    <ItemTemplate>
        @((MarkupString)context)
    </ItemTemplate>
</MudAutocomplete>
<h3>Products</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else if (products.Count == 0)
{
    <p>No products found.</p>
}
else
{
    <MudGrid>
        @foreach (var product in products.Where(p => p.IsAvailable))
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardContent>
                        <MudLink Href="@($"/products/name/{product.Name}")">
                            <MudText Typo="Typo.h6">@product.Name</MudText>
                        </MudLink>                        <MudText Typo="Typo.body2">@product.Price.ToString("C")</MudText>

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => AddToCart(product, 1)">
                            Add to Cart
                        </MudButton>

                        @if (userRole == "Admin")
                        {
                            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="() => MarkAsUnavailable(product)">
                                Mark as Unavailable
                            </MudButton>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
    @if (userRole == "Admin" && products.Any(p => !p.IsAvailable))
    {
        <div style="position: fixed; bottom: 0; width: 100%; background-color: white;">
        <h3>[Admin] Unavailable Products</h3>
        <MudGrid>
            @foreach (var product in products.Where(p => !p.IsAvailable))
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard>
                        <MudCardContent>
                            <MudLink Href="@($"/products/name/{product.Name}")">
                                <MudText Typo="Typo.h6">@product.Name</MudText>
                            </MudLink>
                            <MudText Typo="Typo.body2">@product.Price.ToString("C")</MudText>
                                <MudNumericField T="int" Label="Quantity" @bind-Value="product.Quantity" Min="1" />

                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => MarkAsAvailable(product)">
                                Mark as Available
                            </MudButton>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        </div>
    }
}

@code {
    private List<ProductDto> products;
    private string? userRole;
    private List<ProductDto> cart = new List<ProductDto>();
    private ProductDto? selectedProduct;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllProductsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                userRole = user.Claims.FirstOrDefault(c => c.Type == "role")?.Value;
                StateHasChanged();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

    private async Task<IEnumerable<string>> SearchProducts(string name, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(name))
            return new List<string>();

        return products?
            .Where(p => p != null &&
                        (p.Name != null && p.Name.Contains(name, StringComparison.OrdinalIgnoreCase) ||
                         p.ProductNumber != null && p.ProductNumber.Contains(name, StringComparison.OrdinalIgnoreCase)))
            .Select(p => $"<a href=\"/products/name/{p.Name}\">{p.Name} ({p.ProductNumber})</a>")
            .ToList() ?? new List<string>();
    }


    private void AddToCart(ProductDto product, int quantity)
    {
        if (quantity > 0)
        {
            CartService.AddToCart(product, quantity);
        }
    }

    private void MarkAsUnavailable(ProductDto product)
    {
        product.IsAvailable = false;
        StateHasChanged();
    }
    private void MarkAsAvailable(ProductDto product)
    {
        product.IsAvailable = true;
        StateHasChanged();
    }
    private void NavigateToProduct(string productName)
    {
        NavigationManager.NavigateTo($"/products/name/{productName}");
    }
}
