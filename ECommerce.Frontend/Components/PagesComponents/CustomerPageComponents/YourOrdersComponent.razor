@inject OrderService OrderService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@using ECommerce.Shared.Dtos
@using MudBlazor
@using MudBlazor.Services
@using Microsoft.AspNetCore.Components.Authorization

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h5">Your Orders</MudText>

        @if (isLoading)
        {
            <MudText Typo="Typo.h6">Loading...</MudText>
        }
        else if (orders.Count == 0)
        {
            <MudText Typo="Typo.h6">You have no orders</MudText>
        }
        else
        {
            <MudTable Items="orders">
                <HeaderContent>
                    <MudTh>Order ID</MudTh>
                    <MudTh>Customer Name</MudTh>
                    <MudTh>Customer Email</MudTh>
                    <MudTh>Order Date</MudTh>
                    <MudTh>Total Price</MudTh>
                </HeaderContent>
                <RowTemplate Context="order">
                    <MudTd>
                        <MudLink Href="@($"/orders/{order.Id}")">@order.Id</MudLink>
                    </MudTd>
                    <MudTd>@order.CustomerFullName</MudTd>
                    <MudTd>@order.CustomerEmail</MudTd>
                    <MudTd>@order.OrderDate.ToString("g")</MudTd>
                    <MudTd>@order.TotalPrice.ToString("C")</MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudCardContent>
</MudCard>

@code {
    private List<OrderDto> orders = new();
    private bool isLoading = true;
    private bool isInitialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (!user.Identity.IsAuthenticated)
                {
                    NavigationManager.NavigateTo("/login");
                    return;
                }

                var email = user.FindFirst(c => c.Type == "unique_name")?.Value;
                if (!string.IsNullOrEmpty(email))
                {
                    await LoadOrders(email);
                }
            }
            catch (JSDisconnectedException)
            {
            }
            isLoading = false;
            isInitialized = true;
            StateHasChanged();
        }
    }

    private async Task LoadOrders(string email)
    {
        var orderList = await OrderService.GetOrdersByCustomerEmailAsync(email);
        orders = orderList.ToList();
    }
}
